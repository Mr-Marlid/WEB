1 Перечислите и кратко охарактеризуйте современные WEB-технологии.

HTML5 - язык разметки, который позволяет создавать более семантический и доступный контент в Вебе.
CSS3 - язык таблиц стилей, который позволяет создавать более красивый и интерактивный дизайн для сайтов. 
JavaScript - язык программирования, который позволяет создавать интерактивные элементы на сайтах, такие как анимации, формы и динамически обновляемый контент. 
PHP - язык программирования, который широко используется для создания динамических веб-сайтов.

2 Кто является автором концепции WEB, какие конкретно инновации в Интернет он
предложил?

Автором концепции WEB является Тим Бернерс-Ли. Он является основоположником Всемирной паутины, создавшим первую версию в 1989 году. Тим Бернерс-Ли предложил несколько инноваций в Интернете:

Создал HTML (HyperText Markup Language), который является стандартным языком разметки веб-страниц и позволяет создавать гиперссылки между документами.
Создал HTTP (HyperText Transfer Protocol), который является протоколом передачи данных в Интернете, используемым для передачи веб-страниц.
Создал URL (Uniform Resource Locator), который позволяет идентифицировать уникальный адрес ресурса в Интернете.

3 Понятие хостинга, виды хостинга. Что должен уметь бэкэнд и фронтэнд разработчики?

Хостинг - это услуга, которая позволяет разместить сайт на сервере и сделать его доступным в Интернете. Различные виды хостинга предоставляют разные уровни функциональности и контроля над сервером.
Основные виды хостинга:
Виртуальный хостинг - на одном сервере размещается несколько сайтов, которые используют общие ресурсы сервера. Это наиболее распространенный тип хостинга, который подходит для большинства небольших сайтов.
Выделенный сервер - это физический сервер, который полностью предоставляется одному клиенту. Этот тип хостинга предоставляет большую гибкость и контроль над сервером, но также требует больших затрат на обслуживание и управление сервером.
Облачный хостинг - это современный тип хостинга, который позволяет размещать сайт на нескольких серверах одновременно. Это обеспечивает высокую доступность и масштабируемость сайта.
Колокейшн - это услуга, при которой клиент размещает свой сервер в дата-центре хостинг-провайдера. Этот тип хостинга предоставляет максимальный контроль над сервером, но также требует больших затрат на обслуживание и управление сервером.

4 Назовите исторически различные виды клиент-серверного взаимодействия и соответствующие виды архитектур WEB-приложений.

Трехуровневая архитектура - позволяет повысить эффективность функционирования информационных систем и выполнить оптимизированное распределение программно-аппаратных ресурсов.
Статические сайты - отправляют один и тот же контент каждому пользователю, что может быть превосходным решением для сайтов с небольшим количеством страниц.
Архитектура клиент-сервер - позволяет распределить нагрузку и разделить функционал между клиентской и серверной частями.
WEB-сайты с активными серверными страницами - обеспечивают взаимодействие потребителей-поставщиков информации и позволяют решать задачи улучшения управляемости и контроля бизнес-процессов.

5 Охарактеризуйте разницу между блочными и строчными элементами, как их особенности влияют на верстку?

Блочные элементы:
Занимают всю строку горизонтального пространства на веб-странице.
Автоматически начинаются с новой строки и перемещают последующие элементы на новую строку.
Примеры блочных элементов: заголовки HTML (от <h1> до <h6>), <div>, <p>, <ul>, <ol>, <form>, <table>, <header>, <footer>, <nav>, <article>, <aside>, <section>.
Блочные элементы обычно используются для разделения страницы на блоки контента, такие как заголовки, текст, изображения, таблицы и формы.

Строчные элементы:
Не имеют собственных строк по горизонтали и рассполагаются в одной строке подряд.
Могут быть разделены с помощью элемента разрыва строки <br>.
Примеры строчных элементов: <a>, <strong>, <em>, <span>, <img>, <input>, <button>, <label>, <select>, <textarea>.
Строчные элементы обычно используются для выделения отдельных слов или фраз внутри блочных элементов, а также для создания ссылок, кнопок, полей ввода и других интерактивных элементов.

6 Охарактеризуйте типы верстки, приведите их сравнительную характеристику.

Блочная верстка
  Основным элементом, применяемым в блочной верстке, является тег <div>. Участок кода, отделенный этим тегом, называется слоем.
  Все стилевые решения вынесены за границы кода html в каскадные таблицы стилей. Доступ к ним осуществляется через идентификаторы или классы css.
  Блочная верстка обладает рядом преимуществ: возможность наложения одного слоя на другой, что облегчает позиционирование элементов, легкость создания визуальных эффектов.
  Основным недостатком блочной верстки является некая "двусмысленность" понимания ее кода различными браузерами.

Флекс-верстка
  Флекс-верстка основана на свойствах CSS3 flexbox.
  Флекс-верстка позволяет легко и быстро создавать адаптивные макеты, которые будут корректно отображаться на различных устройствах.
  Главным преимуществом флекс-верстки является возможность создания адаптивных макетов без использования медиа-запросов.

Сравнительная характеристика блочной и флекс версток:

Блочная верстка использует свойства CSS box model, а флекс-верстка - свойства CSS3 flexbox.
Блочная верстка является более универсальным и простым способом верстки, который позволяет создавать различные макеты. Флекс-верстка предназначена для создания адаптивных макетов и может быть более сложной в использовании.
Блочная верстка может быть несколько менее адаптивной, в то время как флекс-верстка позволяет легко создавать адаптивные макеты.

7 Блочная верстка. Примеры блочной верстки. Методы центрирования блоков. Принципы работы Grid и Flex –технологий, релевантность их применения.

Принципы блочной верстки:
  Разделение содержимого и оформления
  Использование тега <div> для создания блоков
  Использование CSS для оформления блоков
  Использование позиционирования для размещения блоков на странице 

Методы центрирования блоков:
   margin
   display и text-align для центрирования содержимого внутри блока
   position и transform для центрирования блока
  
Flexbox и Grid – это технологии, которые позволяют создавать гибкие и адаптивные макеты. Основное отличие между ними заключается в том, что Flexbox предназначен для создания одномерных макетов (направление либо строки, либо колонки), а Grid – для создания двумерных макетов (строки и колонки). Flexbox используется для создания небольших макетов, таких как меню или блоки с содержимым, а Grid – для создания более сложных макет

8 Назовите назначение мета-тегов на странице, приведите примеры.

Мета-теги на странице - это элементы HTML, которые не отображаются на странице, но содержат информацию о странице, которая полезна для поисковых систем и браузеров.
Пример <title> - это заголовок страницы, который отображается во вкладке браузера и в результатах поиска. Он должен содержать краткое и точное описание содержимого страницы и должен быть уникальным для каждой страницы.
<meta name="keywords"> - это ключевые слова, которые описывают содержимое страницы. Хотя этот тег больше не имеет большого значения для SEO, некоторые поисковые системы все еще используют его для определения темы страницы.

9 Что такое "семантические теги" HTML5? Как они влияют на качество и читабельность разметки? Приведите примеры.

Семантические теги HTML5 предназначены для определения значимости содержимого на веб-странице и помогают роботам и поисковым системам лучше понимать структуру и смысловую нагрузку контента. Использование семантических тегов в HTML5 улучшает качество и читабельность разметки, а также облегчает ее восприятие для роботов и людей с ограниченными возможностями.
<header> - шапка страницы или раздела, содержащая обычно навигацию по сайту;
<main> - главный блок контента страницы;

10 Перечислите способы подключения CSS к документу, что такое наследование в CSS?

11 Назовите виды CSS-селекторов. Что такое "псевдоклассы и псевдоэлементы?" Приведите примеры использования.

12 Поясните понятие DOM. Способы программной навигации по HTML странице посредством DOM-дерева (функции нахождения элементов и их отличия).

13 Охарактеризуйте сложные типы скриптовых языков JS и PHP. Приведите примеры. Перечислите особенности языка Java-Script и его области применения.

14 Приведите классификацию типов событий в Java-Script. Перечислите способы назначения обработчиков.

15 Поясните как работает браузерный движок, как можно изменить порядок обработки скриптов, назовите хотя бы 3 способа.

16 Событийная модель Java-Script. Понятие всплытия и делегирования в JS.

17 Что такое регулярные выражения, каково их предназначение, приведите примеры. Сформируйте регулярку для проверки даты в формате dd.mm.yyyy.

Регулярные выражения — это шаблоны, которые задаются для поиска и обработки текстовой информации.
Для проверки даты в формате dd.mm.yyyy можно использовать следующую регулярку: \d{2}\.\d{2}\.\d{4}.

18 Библиотека jQuery: манипуляция элементами DOM. В чем особенности библиотеки jQuery

19 Что такое AJAX? Какие эта концепция использует транспортные технологии? Нарисуйте схему взаимодействия AJAX+ PHP.

20 Приведите характеристики языка JavaScript. Средства отладки WEB-приложений, перечислить, охарактеризовать.

21 Как выполняются параллельные задачи. Опишите Взаимодействие и кооперацию при асинхронном выполнении программ, поясните понятие «гонки».

22 Предназначение callback функций, формат их вызова. Принципы работы Promice, почему ими заменили callback-функции?

23 Механизм HTTP-авторизации. Схема работы и реализация средствами языка PHP. Зачем нужны суперглобальные массивы?

24 Опишите механизм работы сессий и их предназначение. Для чего нужны cookie, где они хранятся, что программно можно с ними делать?
Cookie – это небольшие файлы, создаваемые веб-сайтами, которые хранятся на компьютере пользователя и используются для его дальнейшей идентификации на этом сайте

25 Понятие сессии. Работа с сессиями средствами языка PHP. Авторизация с помощью сессий. Методы защиты сессий.
  
Сессия - это период времени, в течение которого пользователь взаимодействует с веб-сайтом или приложением, начиная с момента входа на сайт и до выхода. Во время сессии сервер хранит информацию о пользователе и его действиях на сайте. Эта информация может быть использована для различных целей, таких как сохранение состояния пользователя, хранение корзины покупок, авторизация и т.д.

Работа с сессиями средствами языка PHP

В PHP для работы с сессиями используется встроенный механизм. Для начала работы с сессией нужно вызвать функцию session_start(), которая стартует новую сессию или возобновляет текущую. После этого можно сохранять и получать значения переменных сессии.

Сессии могут быть уязвимы для атак на безопасность, таких как кража и подмена идентификаторов сессий. Для защиты сессий можно использовать следующие методы:

Использование уникальных идентификаторов сессий
Хранение сессионных данных на сервере, а не на клиенте
Шифрование данных, передаваемых в сессии
Установка корректных параметров для кук, связанных с сессией
Ограничение времени жизни сессии
Проверка и очистка данных сессии перед использованием

26 Протокол HTTP. Основные понятия. Виды HTTP-запросов. Опишите структуру запроса и ответа HTTP. Понятия URL, URN, URI.

Протокол HTTP (HyperText Transfer Protocol) - это протокол прикладного уровня, который используется для передачи данных между клиентом и сервером в Интернете. Основные понятия, которые следует знать о протоколе HTTP:

HTTP-методы: определяют операцию, которую клиент хочет выполнить на сервере. Наиболее распространенные методы - GET, POST, PUT, DELETE, HEAD, OPTIONS и TRACE.
URI (Uniform Resource Identifier): идентифицирует ресурс в Интернете. URI включает в себя URL и URN.
URL (Uniform Resource Locator): адрес ресурса в Интернете. URL включает в себя протокол, доменное имя, порт и путь к ресурсу.
URN (Uniform Resource Name): уникальное имя ресурса в Интернете. URN не включает в себя информацию о местонахождении ресурса.
Заголовки: содержат метаданные о запросе или ответе. Заголовки могут содержать информацию о типе содержимого, кодировке, длине, дате создания и другое.
Основные виды HTTP-запросов:

GET: используется для получения ресурса по указанному URI. GET-запросы могут быть кэшированы браузером или прокси-сервером. GET-запрос не должен изменять состояние сервера.
POST: используется для отправки данных на сервер для обработки. POST-запрос не кэшируется браузером или прокси-сервером. POST-запрос может изменять состояние сервера.
PUT: используется для загрузки содержимого запроса на указанный в запросе URI. PUT-запрос может создавать новый ресурс или обновлять существующий ресурс.
DELETE: используется для удаления ресурса по указанному URI.
HEAD: используется для получения заголовков ответа на запрос без тела ответа.
OPTIONS: используется для получения информации о возможностях сервера и поддерживаемых методах запросов.
TRACE: используется для получения копии запроса, который отправил клиент, для диагностики проблем.
Структура запроса HTTP:

Стартовая строка: содержит HTTP-метод, URI и версию HTTP-протокола.
Заголовки: содержат метаданные о запросе. Заголовки разделяются пустой строкой от тела запроса.
Тело запроса: может содержать данные, передаваемые на сервер.
Структура ответа HTTP:

Стартовая строка: содержит версию HTTP-протокола, код состояния и текстовое описание кода состояния.
Заголовки: содержат метаданные о ответе. Заголовки разделяются пустой строкой от тела ответа.
Тело ответа: может содержать данные, возвращаемые сервером.

27 Перечислите виды уязвимостей WEB-страниц, какие существуют методы борьбы с ними.

28 Структура JSON-объекта. Сравнение JSON и XML.

Структура JSON-объекта:

JSON-объект начинается с { (фигурная скобка) и заканчивается } (фигурная скобка).
Имя/ключ - это строка, заключенная в двойные кавычки.
Значение может быть строкой в двойных кавычках, числом, логическим значением true или false, null или JSON-объектом или массивом.
Каждое имя/ключ следует за двоеточием, каждая пара имя/значение разделяется запятой.

Сравнение JSON и XML:

В REST можно применять как XML, так и JSON. Разработчики отдают предпочтение json-формату, потому что он проще воспринимается и меньше весит. 
JSON проще в применении и данные в нем весят меньше, чем в формате XML. 
XML более многословен, чем JSON, поэтому быстрее писать JSON для программистов. 
XML используется для описания структурированных данных, которые не включают в себя массивы, тогда как JSON включают массивы. 
JSON – это единственный возможный способ обмениваться данными между разными сайтами.
JSON стал популярной альтернативой формату XML из-за его быстрой асинхронной связи клиент-сервер.
В сочетании с AJAX он позволяет асинхронно загружать данные в фоновом режиме, что делает работу сайта более быстрой и удобной для его пользователей.

29 Что выдаст следующий фрагмент кода:
  1 console.log( "A" );
  2 setTimeout( function(){
  3 console.log( "B" );}, 0 );
  4 setTimeout( function(){
  5 console.log( "C" );}, 0 );
  6 console.log( "D" );
  7 console.log( "E" );
  
Данный фрагмент кода выведет в консоль буквы в порядке: A, D, E, B, C.

Это происходит из-за того, что setTimeout работает асинхронно, и функции, переданные внутрь setTimeout, выполнятся только после того, как весь синхронный код выполнится. Так как задержка у всех setTimeout равна 0, все функции будут добавлены в очередь на выполнение практически одновременно, но синхронный код продолжит выполнение до конца. Поэтому сначала выведется буква "A", затем синхронный код выполнится до конца и выведутся буквы "D" и "E", а затем будут выполнены функции, переданные внутрь setTimeout, и выведутся буквы "B" и "C".
